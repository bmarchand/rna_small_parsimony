CLANS = [line.split('\t')[0] for line in open('resources/Rfam.clanin').readlines()]

import json
with open('id2family.json') as f:
    id2family = json.load(f)

family_per_clan = {}
for line in open('resources/Rfam.clanin').readlines():
    clan = line.split('\t')[0]
    family_per_clan[clan] = []
    for ident in line.rstrip('\n').split('\t')[1:]:
        family_per_clan[clan].append(ident)

rule all:
    input:
        expand('results/median_input/{clan}_input_{method}.tab', clan=CLANS, method=['median_heuristic','c2_rf_median_heuristic','fitch_rf']),
        expand('results/median_output_{method}/{clan}_root_structure.tab', clan=CLANS, method=['median_heuristic','c2_rf_median_heuristic','fitch_rf'])

rule median_input:
    input:
        'resources/annotated_family_trees/{clan}/'
    output:
        'results/median_input/{clan}_input_{method}.tab' 
    run:
        f = open(output[0],'w')
        print('common ancestor', file=f)
        for ident in family_per_clan[wildcards.clan]:
            family = id2family[ident]
            fname = 'resources/annotated_family_trees/'+wildcards.clan+'/'+family+'_fully_annotated_'+wildcards.method+'.tab'
            structure = open(fname).readlines()[0].split(' ')[-1].rstrip('\n')
            print('\t'+family,':',structure, file=f)
            
            
            

rule median_computation:
    input:
        'results/median_input/{clan}_input_{method}.tab', 
    output:
        'results/median_output_{method}/{clan}_root_structure.tab'
    run:
        input_structures = []

        for line in open(input[0]).readlines():
            if line.startswith('\t'):
                structure = line.split(' ')[-1].rstrip('\n')
                input_structures.append(structure)

        from rnadist.utils import C2_ILMedian, C2_RFMedian, unconstrained_RFMedian

        if method=='median_heuristic':
            median = C2_ILMedian(input_structures)
        if method=='c2_rf_median_heuristic':
            median = C2_RFMedian(input_structures)
        if method=='fitch_rf':
            median = unconstrained_RFMedian(input_structures)
            

        f = open(output[0], 'w')
        print(wildcards.clan,':',median, file=f)
        for line in open(input[0]).readlines():
            if line.startswith('\t'):
                f.write(line)
